//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 The KubeZoo Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by crd-gen. DO NOT EDIT.

package quota

import (
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

//nolint
func NewClusterResourceQuotaCRD() *apiextensionsv1.CustomResourceDefinition {
	return &apiextensionsv1.CustomResourceDefinition{
		ObjectMeta: metav1.ObjectMeta{Name: "clusterresourcequotas.quota.kubezoo.io"},
		Spec: apiextensionsv1.CustomResourceDefinitionSpec{
			Group: "quota.kubezoo.io",
			Names: apiextensionsv1.CustomResourceDefinitionNames{
				Kind:     "ClusterResourceQuota",
				ListKind: "ClusterResourceQuotaList",
				Plural:   "clusterresourcequotas",
				Singular: "clusterresourcequota",
			},
			Scope: apiextensionsv1.ResourceScope("Cluster"),
			Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
				{
					Name: "v1alpha1",
					Schema: &apiextensionsv1.CustomResourceValidation{OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "ClusterResourceQuota is the Schema for the clusterresourcequota API",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "ClusterResourceQuotaSpec defines the desired state of ClusterResourceQuota",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"hard": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
												XIntOrString: true,
											},
										},
										Description: "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
										Type:        "object",
									},
									"namespaceSelector": {
										Description: "A label query over a set of resources, in this case namespaces.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{
													Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
													Properties: map[string]apiextensionsv1.JSONSchemaProps{
														"key": {
															Description: "key is the label key that the selector applies to.",
															Type:        "string",
														},
														"operator": {
															Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
															Type:        "string",
														},
														"values": {
															Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
															Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
															Type:        "array",
														},
													},
													Required: []string{
														"key",
														"operator",
													},
													Type: "object",
												}},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"namespaces": {
										Description: "namespaces specifies which namespaces the cluster resource quota applies to.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"scopeSelector": {
										Description: "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{"matchExpressions": {
											Description: "A list of scope selector requirements by scope of the resources.",
											Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"operator": {
														Description: "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
														Type:        "string",
													},
													"scopeName": {
														Description: "The name of the scope that the selector applies to.",
														Type:        "string",
													},
													"values": {
														Description: "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Required: []string{
													"operator",
													"scopeName",
												},
												Type: "object",
											}},
											Type: "array",
										}},
										Type: "object",
									},
									"scopes": {
										Description: "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{
											Description: "A ResourceQuotaScope defines a filter that must match each object tracked by a quota",
											Type:        "string",
										}},
										Type: "array",
									},
								},
								Type: "object",
							},
							"status": {
								Description: "ClusterResourceQuotaStatus defines the observed state of ClusterResourceQuota",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"hard": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
												XIntOrString: true,
											},
										},
										Description: "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
										Type:        "object",
									},
									"used": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
												XIntOrString: true,
											},
										},
										Description: "Used is the current observed total usage of the resource in the namespace.",
										Type:        "object",
									},
								},
								Type: "object",
							},
						},
						Type: "object",
					}},
					Served:       true,
					Storage:      true,
					Subresources: &apiextensionsv1.CustomResourceSubresources{Status: &apiextensionsv1.CustomResourceSubresourceStatus{}},
				},
			},
		},
		Status: apiextensionsv1.CustomResourceDefinitionStatus{
			Conditions:     []apiextensionsv1.CustomResourceDefinitionCondition{},
			StoredVersions: []string{},
		},
		TypeMeta: metav1.TypeMeta{
			APIVersion: "apiextensions.k8s.io/v1",
			Kind:       "CustomResourceDefinition",
		},
	}
}

//nolint
func NewCustomResourceDefinitions() []*apiextensionsv1.CustomResourceDefinition {
	return []*apiextensionsv1.CustomResourceDefinition{NewClusterResourceQuotaCRD()}
}
